name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  FRONTEND_IMAGE_NAME: ghcr.io/${{ github.repository }}/demo-notes-frontend
  BACKEND_IMAGE_NAME: ghcr.io/${{ github.repository }}/demo-notes-backend
  KUBERNETES_HOST: ${{ secrets.KUBERNETES_PUBLIC_IP }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20.x'

    - name: Install dependencies
      run: |
        npm install -g typescript
        npm run install:all

    - name: Setup frontend
      working-directory: ./frontend
      run: |
        npm install
        npm install --save-dev @vue/compiler-sfc

    - name: Build frontend
      working-directory: ./frontend
      run: |
        npm run build

    - name: Build backend
      working-directory: ./backend
      run: |
        npm run build

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push frontend image
      uses: docker/build-push-action@v4
      with:
        context: ./frontend
        push: true
        tags: ${{ env.FRONTEND_IMAGE_NAME }}:${{ github.sha }},${{ env.FRONTEND_IMAGE_NAME }}:latest

    - name: Build and push backend image
      uses: docker/build-push-action@v4
      with:
        context: ./backend
        push: true
        tags: ${{ env.BACKEND_IMAGE_NAME }}:${{ github.sha }},${{ env.BACKEND_IMAGE_NAME }}:latest

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure kubectl
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > $HOME/.kube/config
        chmod 600 $HOME/.kube/config
        # Set insecure flag globally for this cluster
        kubectl config set-cluster $(kubectl config current-context) --insecure-skip-tls-verify=true

    - name: Test cluster connection
      run: |
        # Verify cluster connection (skip TLS verification for self-signed certs)
        kubectl cluster-info --insecure-skip-tls-verify
        kubectl get nodes --insecure-skip-tls-verify

    - name: Deploy to Kubernetes
      run: |
        # Create image pull secret for GitHub Container Registry
        kubectl create secret docker-registry ghcr-secret \
          --docker-server=ghcr.io \
          --docker-username=${{ github.actor }} \
          --docker-password=${{ secrets.GITHUB_TOKEN }} \
          --docker-email=${{ github.actor }}@users.noreply.github.com \
          -n default --dry-run=client -o yaml --insecure-skip-tls-verify | kubectl apply -f - --insecure-skip-tls-verify

        # Generate base64 encoded postgres password
        POSTGRES_PASSWORD_B64=$(echo -n "${{ secrets.POSTGRES_PASSWORD || 'defaultpassword123' }}" | base64)

        # Update image tags and secrets in deployment files
        sed -i "s|{{FRONTEND_IMAGE}}|${{ env.FRONTEND_IMAGE_NAME }}:${{ github.sha }}|g" k8s/frontend.yaml
        sed -i "s|{{BACKEND_IMAGE}}|${{ env.BACKEND_IMAGE_NAME }}:${{ github.sha }}|g" k8s/backend.yaml
        sed -i "s|\${BASE64_POSTGRES_PASSWORD}|${POSTGRES_PASSWORD_B64}|g" k8s/postgres.yaml

        # Create storage directory on worker node (for local storage)
        kubectl debug node/k8s-worker -it --image=busybox --insecure-skip-tls-verify -- mkdir -p /tmp/postgres-data || true

        # Deploy storage configuration first
        kubectl apply -f k8s/local-storage.yaml --insecure-skip-tls-verify
        
        # Apply Kubernetes manifests
        kubectl apply -f k8s/ --insecure-skip-tls-verify
